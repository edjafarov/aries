var fs = require('fs');
var util = require('util');
var jsSCP = require("../src/parser.js");
var ejs=require("ejs");


function UMLdrawer(path){
    
    var srcFiles = sourceFolderWalker(path);
    
    var parser=new jsSCP();
    var global = [];
    var classes = {};
    
    for(var i =0; i < srcFiles.length; i++){
        console.log("parsing " + srcFiles[i]);
        var scopes = parser.parse(fs.readFileSync(srcFiles[i]).toString(), srcFiles[i]);
        for(var j=0;j<scopes.length;j++){
            if(scopes[j].type == "function" && scopes[j].functionName){
                classes[scopes[j].functionName] = 
                {
                    scope:scopes[j],
                    globalRefScopes: global.length
                }
            }
        }
        global[global.length]=scopes;
    }
    for(className in classes){
        var superClassName = classes[className].scope.superClassName;
        if(superClassName && classes[superClassName]){
            if(!classes[superClassName].subClasses){
                classes[superClassName].subClasses = [];
            }
            classes[superClassName].subClasses.push(className);
        }
    }
    
    //TODO: run getClassTpl for all top Level Classes
    
    fs.openSync("./test/diagram.html", 'w+');
    var resultPage = ejs.render(fs.readFileSync("./test/umlTemplates/onepage.html").toString(),{locals:{content:getClassTpl("someTopClass",classes)}});
    fs.writeFileSync("./test/diagram.html", resultPage);
}

function getClassTpl(className, classes){
    var childs = "";
    for(childClass in classes[className].subClasses){
        childs+=getClassTpl(classes[className].subClasses[childClass], classes);
    }
    console.log(util.inspect(classes[className]));
    var locals = {
            className:className,
            params:classes[className].params||[],
            methods:classes[className].scope.properties||[],
            childs:childs||[]
        }
        
    var templ = ejs.render(fs.readFileSync("./test/umlTemplates/class.html").toString(),{locals:locals})
    return templ;
}

function sourceFolderWalker(rootpath){
    var filesList=[];
    function walker(path){
        path+="/";
        var locaDirFilesList = fs.readdirSync(path);
        for(var i=0; i<locaDirFilesList.length;i++){
            var stats = fs.statSync(path + locaDirFilesList[i]);
            if(stats.isFile() && locaDirFilesList[i].lastIndexOf("\.js")!=-1){
                filesList.push(path + locaDirFilesList[i]);
            }else if(stats.isDirectory()){
                walker(path + locaDirFilesList[i]);
            }
        }
    }
    walker(rootpath);
    return filesList;
}

UMLdrawer("./test");