var fs = require("fs");
var util = require('util');
var sourceReader = require("./sourceReader.js");
var scopesParser = require("./scopesParser.js");
var scopeModifier = require("./scopeModifier.js");
var events = require("events");


REGEXP = {
    FUNCTION: "function\\s*([\\w_]*)\\s*\\(([^\\)]*?)\\)\\s*\\{$",
    PROTOTYPE: "\\.prototype\\.(\\w+)\\s*=\\s*",
    SOME: "\\s(\\w+)",
    LOCAL: "\\sthis\\.(\\w+)\\s*=\\s*",
    OBJECT: "\\s*[=:]\\s*{$",
    ASSIGNED_TO: "[\\s\\.](\\w+)\\s*=\\s*"
};

CONST = {
    UNDEFINED: "undefined",
    FUNCTION: "function",
    OBJECT: "object",
    METHOD: "method",
    INNER_METHOD: "inner_method",
    INNER_FUNCTION: "inner_function",
    PROTOTYPED: "prototyped",
    STATIC: "static"
};

var processors = [
require("./processors/functionProcessor.js"), 
require("./processors/prototypeFunctionProcessor.js"), 
require("./processors/inConstructorFunctionProcessor.js"),
require("./processors/functionArgumentsParser.js"),
require("./processors/annotationFunctionProcessor.js"), 
require("./processors/inheritanceProcessor.js")
];


function Parser() {
    events.EventEmitter.call(this);
}

util.inherits(Parser, events.EventEmitter);

Parser.prototype.scopes = [];

Parser.prototype.sr = null;
Parser.prototype.sm = null;

Parser.prototype.parse = function parse(src, filePath) {

    this.sr = sourceReader(src);

    this.scopes = scopesParser(src);
    
    
    this.sm = scopeModifier(this.scopes, src);
    
    if(filePath){
        this.scopes.forEach(
            function(s){
                s.filePath = filePath;
            });
    }
    
    var self = this;
    
    processors.forEach(
        function(processor){
            self.scopes.forEach(
                function(s, i, ss){
                    processor(s, i, ss, self);
                }
            )
        }
    )  
    return this.scopes;
}

module.exports = Parser;